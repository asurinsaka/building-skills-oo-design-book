
Hand Total Class Design
-------------------------

..  class:: HandTotal


    The :class:`HandTotal` class is a stateful computation a total of the cards in a hand.
    There are distinct subclasses for the two hard total and hard + soft totals.

Constructor
~~~~~~~~~~~~~


..  method:: HandTotal.__init__(self, hand: Hand) -> None

    :param hand: The hand for which to compute a total
    :type hand: :class:`Hand`


    Creates a new :class:`HandTotal` object associated with a given hand.

    This could do an **Eager** computation of the hand's state.

    It could also wait until tht total is requested to do a **Lazy** computation
    of the hand's state.

Methods
~~~~~~~~


..  method:: HandTotal.total(self, exclude: Card=None) -> int

    Computes a total of all the cards in the associated hand.
    If ``exclude`` is not :literal:`None`, exclude the the indicated card from the total.

    This method is abstract, it should return `NotImplemented`.  Each
    subclass will provide an implementation.

    :param exclude: A card to exclude from the total
    :type exclude: :class:`Card`


Hand Hard Total Class Design
-----------------------------

..  class:: HandHardTotal

    Computes a hard total of the cards in a hand.


..  method:: HandHardTotal.total(self, exclude: Card=None) -> int

    Computes the hard total of all the cards in the associated hand.
    If exclude is not :literal:`None`, exclude the the indicated card from the total.

    :param exclude: A card to exclude from the total
    :type exclude: :class:`Card`


Hand Soft Total Class Design
-----------------------------

..  class:: HandSoftTotal

    Computes a soft total of the cards in a hand.
    This subclass of :class:`HandTotal` is used when there is one or more
    aces and the hand's soft total would be 21 or less.


..  method:: HandSoftTotal.total(self, exclude: Card=None) -> int

    Computes the soft total of all the cards in the associated hand.
    If exclude is not :literal:`None`, exclude the the indicated card from the total.

    :param exclude: A card to exclude from the total
    :type exclude: :class:`Card`


Card Class Updates
-------------------

Each subclass of Card needs to provide a method that sets the hand's total algorithm.


..  method:: Card.setAltTotal(hand: Hand) -> None

    :param hand: The hand for which to set a total algorithm
    :type hand: Hand


    There are two different implementations for this method in :class:`Card`, and :class:`AceCard`.

    Note that each implementation differs only in what is done with the soft total is 21 or less.
    With a little care, this single difference can be factored out into the :class:`AceCard` subclass.

Card Class
~~~~~~~~~~~

To determine what alternative total object is appropriate for this hand, do the following.

1.  Get the soft total of all cards except this one.

2.  Add the soft points of this card.   This happens to be the same as the hard points, but a good program
    doesn't repeat this piece of information; it uses the :meth:`Card.softValue` method.

3.  If this is over 21, then set the :attr:`Hand.altTotal` to to :attr:`Hand.hard`.

    If the soft total is 21 or less, then the :attr:`Hand.altTotal` is left untouched.

AceCard Class
~~~~~~~~~~~~~~

To determine what alternative total object is appropriate for this hand, do the following.

1.  Get the soft total of all cards except this one.

2.  Add the soft points of this card.  This happens to be 11 for an Ace, but a good program
    doesn't repeat this piece of information; it uses the :meth:`Card.softValue` method.

3.  If this is over 21, then set the :attr:`Hand.altTotal` to to :attr:`Hand.hard`.

    Otherwise, the soft total is 21 or less, then set the :attr:`Hand.altTotal` to :attr:`Hand.soft`.
